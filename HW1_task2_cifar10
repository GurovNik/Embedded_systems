import keras
from keras.models import Sequential
from keras.models import Input
from keras.layers import Conv2D, MaxPooling2D # Convolution, MaxPooling respectively
from keras.layers import Dense, Flatten, Dropout # FullyConnected, Reshape respectively
# ### Modified LeNet5
input_shape = (32, 32, 3)
# 1st layers
conv1 = Conv2D(32, kernel_size=(3, 3), padding='same', input_shape=input_shape, activation='relu')
pool1 = MaxPooling2D(pool_size=(3, 3), strides=(2, 2))
# 2nd layers
conv2 = Conv2D(64, kernel_size=(3, 3), padding='same', activation='relu')
pool2 = MaxPooling2D(pool_size=(3, 3), strides=(2, 2))
# 3rd layers
conv3 = Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu')
# classification layers
flatten = Flatten()
fc1 = Dense(2048)
fc2 = Dense(10, activation='softmax')
model = Sequential()
model.add(conv1)
model.add(pool1)
model.add(Dropout(0.2))
model.add(conv2)
model.add(pool2)
model.add(Dropout(0.4))
model.add(conv3)
model.add(Dropout(0.3))
model.add(flatten)
model.add(fc1)
model.add(fc2)
loss=keras.losses.categorical_crossentropy
optimizer = keras.optimizers.Adamax(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0)
model.compile(loss=loss,
              optimizer=optimizer,
              metrics=['accuracy'])
# from keras.datasets import mnist
from keras.datasets import cifar10

# (x_train, y_train), (x_test, y_test) = mnist.load_data()
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train = x_train.reshape(x_train.shape[0], 32, 32, 3)
x_test = x_test.reshape(x_test.shape[0], 32, 32, 3)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
# convert class vectors to binary class matrices
num_classes = 10
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
# hyperparameters
batch_size = 128
epochs = 30

model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))
batch_size = 512
model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))
